-----------------payment_type---------------------
CREATE TYPE dudos.payment_type AS ENUM (
    'INVOICE',
    'PAYMENT',
    'REFUND');
-----------------payment_payer--------------------
alter table dudos.payment_payer add column payment_id character varying;
alter table dudos.payment_payer add column refund_id character varying;
alter table dudos.payment_payer add column type dudos.payment_type;

---------merchant_shop_template_types-------------
create unique index merchant_shop_template_types_ucode_key on dudos.merchant_shop_template_types(code);

update dudos.merchant_shop_template_types
set code = 'INVOICE.PAYMENT.STATUS.CHANGED.PROCESSED', description = 'Изменение статуса платежа на "Обработано"'
where code = 'INVOICE.STATUS.CHANGED';

insert into dudos.merchant_shop_template_types(id, code, description) values(3, 'INVOICE.PAYMENT.STATUS.CHANGED.REFUNDED', 'Изменение статуса платежа на "Возвращено"');

------------------templates-----------------------

insert into dudos.templates (id, body) values (4, convert_from(decode('', 'base64'), 'UTF8'));

insert into dudos.merchant_shop_bind(id, type, template_id) values (3, 3, 4);
